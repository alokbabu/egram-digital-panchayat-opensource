// <auto-generated />
using System;
using EGram.Data.SQL.Ef.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EGram.Data.SQL.Ef.Migrations
{
    [DbContext(typeof(EGramContext))]
    [Migration("20181111210604_AddSurveyType")]
    partial class AddSurveyType
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EGram.Data.SQL.Ef.Identity.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("EGram.Data.SQL.Ef.Models.BloodGroup", b =>
                {
                    b.Property<int>("BloodGroupId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Group")
                        .HasColumnType("varchar(200)");

                    b.HasKey("BloodGroupId");

                    b.ToTable("BloodGroups");

                    b.HasData(
                        new { BloodGroupId = 1, Group = "A +" },
                        new { BloodGroupId = 2, Group = "A -" },
                        new { BloodGroupId = 3, Group = "B +" },
                        new { BloodGroupId = 4, Group = "B -" },
                        new { BloodGroupId = 5, Group = "O +" },
                        new { BloodGroupId = 6, Group = "O -" },
                        new { BloodGroupId = 7, Group = "AB +" },
                        new { BloodGroupId = 8, Group = "AB -" }
                    );
                });

            modelBuilder.Entity("EGram.Data.SQL.Ef.Models.Education", b =>
                {
                    b.Property<int>("EducationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EducationLevel");

                    b.HasKey("EducationId");

                    b.ToTable("Educations");

                    b.HasData(
                        new { EducationId = 1, EducationLevel = "Basic School" },
                        new { EducationId = 2, EducationLevel = "High School" },
                        new { EducationId = 3, EducationLevel = "Predegree/Diploma" },
                        new { EducationId = 4, EducationLevel = "Graduate" },
                        new { EducationId = 5, EducationLevel = "Post Graduate" },
                        new { EducationId = 6, EducationLevel = "Doctorate or Higher" }
                    );
                });

            modelBuilder.Entity("EGram.Data.SQL.Ef.Models.House", b =>
                {
                    b.Property<int>("HouseId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressLine")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(10, 6)");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(10, 6)");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("PostOffice")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.HasKey("HouseId");

                    b.ToTable("House");

                    b.HasData(
                        new { HouseId = 1, AddressLine = "47 Bharat Bhawan", City = "Mumbai", HouseNumber = "B4134", PostCode = "987789", PostOffice = "Mumbai", StreetAddress = "Kalbadevi Road, Kalbadevi" },
                        new { HouseId = 2, AddressLine = "Lake Town", City = "Kolata", HouseNumber = "P-173", PostCode = "700089", PostOffice = "Kolkaata", StreetAddress = "Kolkata" },
                        new { HouseId = 3, AddressLine = "Sec12, Opp.lakme Beauty Center, Vashi, Navi Mumbai", City = "Mumbai", HouseNumber = "Plot No 190 A", PostCode = "400703", PostOffice = "Mumbai", StreetAddress = "Mumbai" }
                    );
                });

            modelBuilder.Entity("EGram.Data.SQL.Ef.Models.Occupation", b =>
                {
                    b.Property<int>("OccupationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Info")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Type")
                        .HasColumnType("varchar(50)");

                    b.HasKey("OccupationId");

                    b.ToTable("Occupations");

                    b.HasData(
                        new { OccupationId = 1, Info = "Primary School Teacher", Type = "Teacher" },
                        new { OccupationId = 2, Info = "Carpenter", Type = "Daily wage" },
                        new { OccupationId = 3, Info = "Bus Driver, Truck Driver", Type = "Driver" },
                        new { OccupationId = 4, Info = "Business with less than 10 employes", Type = "Small scale Business" },
                        new { OccupationId = 5, Info = "Business with 10-100 employees", Type = "Medium scale Busiess" },
                        new { OccupationId = 6, Info = "Business with morethan 100 employees", Type = "Large Scale Business" },
                        new { OccupationId = 7, Info = "Electical, Civil, Software, Mechanical", Type = "Engineer" },
                        new { OccupationId = 8, Info = "Medical Doctors, Vetinary Doctors etc", Type = "Doctor" }
                    );
                });

            modelBuilder.Entity("EGram.Data.SQL.Ef.Models.Person", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BloodGroupId");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<int>("EducationId");

                    b.Property<string>("Email");

                    b.Property<int>("Firstname");

                    b.Property<string>("Gender");

                    b.Property<int>("Lastname");

                    b.Property<string>("MobileNumber");

                    b.Property<int>("OccupationId");

                    b.Property<bool>("RecieveNotification");

                    b.HasKey("PersonId");

                    b.HasIndex("BloodGroupId")
                        .IsUnique();

                    b.HasIndex("EducationId")
                        .IsUnique();

                    b.HasIndex("OccupationId")
                        .IsUnique();

                    b.ToTable("Person");
                });

            modelBuilder.Entity("EGram.Data.SQL.Ef.Models.Survey", b =>
                {
                    b.Property<int>("SurveyId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Info");

                    b.Property<DateTime>("ModifiedOn");

                    b.Property<string>("Name");

                    b.Property<int>("SurveyTypeId");

                    b.Property<int>("YearId");

                    b.HasKey("SurveyId");

                    b.HasIndex("SurveyId")
                        .IsUnique();

                    b.HasIndex("SurveyTypeId");

                    b.ToTable("Surveys");

                    b.HasData(
                        new { SurveyId = 1, CreatedOn = new DateTime(2018, 11, 11, 21, 6, 4, 48, DateTimeKind.Local), Info = "Yearly Survey", ModifiedOn = new DateTime(2018, 11, 11, 21, 6, 4, 48, DateTimeKind.Local), Name = "Yearly end survey 2018", SurveyTypeId = 1, YearId = 1 }
                    );
                });

            modelBuilder.Entity("EGram.Data.SQL.Ef.Models.SurveyType", b =>
                {
                    b.Property<int>("SurveyTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Type");

                    b.HasKey("SurveyTypeId");

                    b.HasIndex("SurveyTypeId")
                        .IsUnique();

                    b.ToTable("SurveyTypes");

                    b.HasData(
                        new { SurveyTypeId = 1, Type = "House" },
                        new { SurveyTypeId = 2, Type = "Person" }
                    );
                });

            modelBuilder.Entity("EGram.Data.SQL.Ef.Models.Year", b =>
                {
                    b.Property<int>("YearId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("YearString");

                    b.HasKey("YearId");

                    b.HasIndex("YearId")
                        .IsUnique();

                    b.ToTable("Years");

                    b.HasData(
                        new { YearId = 1, YearString = "2018" },
                        new { YearId = 2, YearString = "2019" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<Guid>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("EGram.Data.SQL.Ef.Models.Person", b =>
                {
                    b.HasOne("EGram.Data.SQL.Ef.Models.BloodGroup", "BloodGroup")
                        .WithOne("Person")
                        .HasForeignKey("EGram.Data.SQL.Ef.Models.Person", "BloodGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EGram.Data.SQL.Ef.Models.Education", "Education")
                        .WithOne("Person")
                        .HasForeignKey("EGram.Data.SQL.Ef.Models.Person", "EducationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EGram.Data.SQL.Ef.Models.Occupation", "Occupation")
                        .WithOne("Person")
                        .HasForeignKey("EGram.Data.SQL.Ef.Models.Person", "OccupationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EGram.Data.SQL.Ef.Models.Survey", b =>
                {
                    b.HasOne("EGram.Data.SQL.Ef.Models.SurveyType", "SurveyType")
                        .WithMany()
                        .HasForeignKey("SurveyTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("EGram.Data.SQL.Ef.Identity.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("EGram.Data.SQL.Ef.Identity.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EGram.Data.SQL.Ef.Identity.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("EGram.Data.SQL.Ef.Identity.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
